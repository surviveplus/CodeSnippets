<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Exception</Title>
			<Shortcut>ExceptionSurviveplus</Shortcut>
			<Description>Code snippet for Exception</Description>
			<Author>Surviveplus.net</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Explanation</ID>
					<Type>String</Type>
					<ToolTip>Replace with the situation when this exception is thrown.</ToolTip>
					<Default>problem occurs</Default>
				</Literal>
				<Literal>
					<ID>Problem</ID>
					<ToolTip>Exception Name</ToolTip>
					<Default>Problem</Default>
				</Literal>
				<Literal>
					<ID>baseException</ID>
					<ToolTip>Base Type</ToolTip>
					<Function>SimpleTypeName(global::System.Exception)</Function>
				</Literal>
				<Literal Editable="false">
					<ID>SystemException</ID>
					<Function>SimpleTypeName(global::System.Exception)</Function>
				</Literal>
				<Literal Editable="false">
					<ID>SystemSerializable</ID>
					<Function>SimpleTypeName(global::System.Serializable)</Function>
				</Literal>
				<Literal Editable="false">
					<ID>SystemRuntimeSerializationSerializationInfo</ID>
					<Function>SimpleTypeName(global::System.Runtime.Serialization.SerializationInfo)</Function>
				</Literal>
				<Literal Editable="false">
					<ID>SystemRuntimeSerializationStreamingContext</ID>
					<Function>SimpleTypeName(global::System.Runtime.Serialization.StreamingContext)</Function>
				</Literal>
			</Declarations>
			<Code Language="csharp">
          <![CDATA[/// <summary>
    /// The exception that is thrown when $Explanation$.
    /// </summary>
    /// <remarks>
    /// <para>change log</para>
    /// </remarks>
    [$SystemSerializable$]
    public class $Problem$Exception : $baseException$
    {
        // Override or Implement Interface

        #region Exception Members

        /// <summary>
        /// Sets the SerializationInfo object with the parameter name and additional exception information.
        /// </summary>
        /// <param name="info">The object that holds the serialized object data.</param>
        /// <param name="context">The contextual information about the source or destination.</param>
        /// <exception cref="System.ArgumentNullException">The info object is a null reference (Nothing in Visual Basic).</exception>
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            base.GetObjectData(info, context);

            // TODO: Save private members in info object. For example to save Value property, write the code as follows.
            // info.AddValue("Value", this.Value);
        } // end sub

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the $Problem$Exception class.
        /// </summary>
        public $Problem$Exception() { }

        /// <summary>
        /// Initializes a new instance of the $Problem$Exception class with a specified error message. 
        /// </summary>
        /// <param name="message">The error message that explains the reason for the exception.</param>
        public $Problem$Exception(string message) : base(message) { }

        /// <summary>
        /// Initializes a new instance of the $Problem$Exception class with a specified error message and a reference to the inner exception that is the cause of this exception.
        /// </summary>
        /// <param name="message">The error message that explains the reason for the exception.</param>
        /// <param name="inner">The exception that is the cause of the current exception. Set a null reference (Nothing in Visual Basic) if the inner exception value was not supplied.</param>
        public $Problem$Exception(string message, $SystemException$ inner) : base(message, inner) { }

        /// <summary>
        /// Initializes a new instance of the $Problem$Exception class with serialized data.
        /// </summary>
        /// <param name="info">The object that holds the serialized object data.</param>
        /// <param name="context">The contextual information about the source or destination.</param>
        protected $Problem$Exception(
          $SystemRuntimeSerializationSerializationInfo$ info, 
          $SystemRuntimeSerializationStreamingContext$ context )
            : base(info, context) { 
        
            // TODO: Initialize private members by info object. For example to initialize Value property, write the code as follows.
            // this.Value = info.GetInt32("Value");

        } // end constructor

        #endregion

    } // end class]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
