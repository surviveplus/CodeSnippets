<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
      <Title>Implement IDisposable</Title>
      <Author>Surviveplus.net</Author>
      <Description>Define logic of IDisposable implementation.</Description>
      <Shortcut>dispoase</Shortcut>
      <SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal Editable="false">
					<ID>classname</ID>
					<ToolTip>Class Name</ToolTip>
					<Function>ClassName()</Function>
					<Default>ClassNamePlaceholder</Default>
				</Literal>
			</Declarations>
			<Code Language="csharp">
        <![CDATA[
		#region IDisposable Members

		/// <summary>
		/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
		/// </summary>
		public void Dispose() {
			this.Dispose( true );
			GC.SuppressFinalize( this );
		} // end sub

		/// <summary>
		/// Destruct instance of the class.
		/// </summary>
		~$classname$() {
			this.Dispose( false );
		}

		/// <summary>
		/// Backing field to track whether Dispose has been called.
		/// </summary>
		private bool disposedValue = false;

		/// <summary>
		/// Dispose managed and unmanaged resources of this instance.
		/// </summary>
		/// <param name="disposing">If disposing equals true, managed and unmanaged resources can be disposed. If disposing equals false, only unmanaged resources can be disposed. </param>
		protected virtual void Dispose( bool disposing ) {

			if ( this.disposedValue == false ) {
				if ( disposing ) {
                	// TODO: Dispose managed resources.
				} // end if

				// TODO: Dispose unmanaged resources.
			} // end if

			this.disposedValue = true;
		} // end sub

		#endregion]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
