<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>例外</Title>
			<Shortcut>ExceptionSurviveplus</Shortcut>
			<Description>例外に対するコード スニペット</Description>
			<Author>Surviveplus.net</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Explanation</ID>
					<Type>String</Type>
					<ToolTip>例外がスローされる場面を表現するテキストで置き換えます。</ToolTip>
					<Default>問題が発生した</Default>
				</Literal>
				<Literal>
					<ID>Problem</ID>
					<ToolTip>例外名</ToolTip>
					<Default>Problem</Default>
				</Literal>
				<Literal>
					<ID>baseException</ID>
					<ToolTip>基本型</ToolTip>
					<Function>SimpleTypeName(global::System.Exception)</Function>
				</Literal>
				<Literal Editable="false">
					<ID>SystemException</ID>
					<Function>SimpleTypeName(global::System.Exception)</Function>
				</Literal>
				<Literal Editable="false">
					<ID>SystemSerializable</ID>
					<Function>SimpleTypeName(global::System.Serializable)</Function>
				</Literal>
				<Literal Editable="false">
					<ID>SystemRuntimeSerializationSerializationInfo</ID>
					<Function>SimpleTypeName(global::System.Runtime.Serialization.SerializationInfo)</Function>
				</Literal>
				<Literal Editable="false">
					<ID>SystemRuntimeSerializationStreamingContext</ID>
					<Function>SimpleTypeName(global::System.Runtime.Serialization.StreamingContext)</Function>
				</Literal>
			</Declarations>
			<Code Language="csharp"><![CDATA[/// <summary>
    /// $Explanation$場合にスローされる例外です。
    /// </summary>
    /// <remarks>
    /// <para>変更履歴</para>
    /// </remarks>
    [$SystemSerializable$]
    public class $Problem$Exception : $baseException$
    {
        // オーバーライド・インターフェイス実装

        #region Exception メンバ

        /// <summary>
        /// パラメーター名と追加の例外情報を使用して SerializationInfo オブジェクトを設定します。
        /// </summary>
        /// <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
        /// <param name="context">転送元または転送先に関するコンテキスト情報。</param>
        /// <exception cref="System.ArgumentNullException">info オブジェクトが null 参照 (Visual Basic の場合は Nothing) です。</exception>
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            base.GetObjectData(info, context);

            // TODO: プライベートメンバを info オブジェクトに記録します。例えば整数の "Value" プロパティを記録するには、次のように記述します。
            // info.AddValue("Value", this.Value);
        } // end sub

        #endregion

        #region コンストラクタ

        /// <summary>
        /// $Problem$Exception クラスの新しいインスタンスを初期化します。
        /// </summary>
        public $Problem$Exception() { }

        /// <summary>
        /// 指定したエラー メッセージを使用して、$Problem$Exception クラスの新しいインスタンスを初期化します。
        /// </summary>
        /// <param name="message">エラーを説明するメッセージ。</param>
        public $Problem$Exception(string message) : base(message) { }

        /// <summary>
        /// 指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、$Problem$Exception クラスの新しいインスタンスを初期化します。
        /// </summary>
        /// <param name="message">例外の原因を説明するエラー メッセージ。</param>
        /// <param name="inner">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic の場合は Nothing) 。</param>
        public $Problem$Exception(string message, $SystemException$ inner) : base(message, inner) { }

        /// <summary>
        /// シリアル化したデータを使用して、$Problem$Exception クラスの新しいインスタンスを初期化します。
        /// </summary>
        /// <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
        /// <param name="context">転送元または転送先に関するコンテキスト情報。</param>
        protected $Problem$Exception(
          $SystemRuntimeSerializationSerializationInfo$ info, 
          $SystemRuntimeSerializationStreamingContext$ context )
            : base(info, context) { 
        
            // TODO: プライベートメンバを info オブジェクトを使って初期化します。例えば整数の "Value" プロパティを初期化するには、次のように記述します。
            // this.Value = info.GetInt32("Value");

        } // end constructor

        #endregion

    } // end class]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
